=begin
#===============================================================================
  Black Wyvern Arts - PRGM-X Sleeker ATB
  Author: Black Wyvern
  Created: 03/11/16
  Updated: 03/13/16
  Version: 1.0
#===============================================================================
  *** Only for RPG Maker VX Ace. ***
  ------------------------------------------------------------------------------
  To install this script, open up your script editor and copy/paste this script
  to an open slot below ▼ Materials but above ▼ Main. Remember to save.
  
  Terms of use:
    1. Give credit where credit is due.
    2. You may use my code in anything you like. Commercial, non-commercial.
    3. If you edit my code in any way, please link back to the original source.
    4. Support is always appreciated in form of gold, sacrificial virgins,
        large quantaties of bacon (or other cooked meats), or free games.
          I can be contacted at LuneTheWyvern@Gmail.com

  Description:
    Integrates ATB or Stamina from multiple sources (hopefully! X.=.x) and makes
    them compatible with Sleeker Gauges. As I could not find all of the script
    sources, the only one fully working and tested is Yami ATB. The others are
    provisionally supported via equations found in MOG_ATB_Ayesha. If something
    catches on fire, please let me know, lol.

  Instructions: Plug 'n' Play
    - Nothing else really.

  Configuration:
    - None
  
  Optional:
    - None

  Dependencies:
    - RPGM-X Sleeker Gauges Place this below SG.

  Compatability:
  - Yami :: YSA Battle Engine Classic ATB (Confirmed working)
  - Victor :: VE Engine ATB System        (Unconfirmed)
  - Moghunter :: ATB                      (Unconfirmed)
  - CCWinter :: ATB                       (Unconfirmed)
  
  Credits:
  - Moghunter :: Used some of the formulas from Ayesha. Maybe works. Maybe not.
#===============================================================================
=end

active = true # Turns the script on or off.
#==============================================================================
# Version Checking
# -- Just making sure you have the core module installed.
# -- You probably shouldn't poke at this bit.
#==============================================================================
Core = $imported["RPGM-X_Gauges"]
Req = 1.5
if Core
  Ver = Core[1]
  if Ver < Req
    Debug("version","Insufficient Required Version","1.0 or Higher",false,false,
      "This script will not be activated:\nRPGM-X Sleeker ATB")
    active = false
  end
else
  title = "RPGM-X Sleeker ATB"
  error = "This script requires/must be placed below" +
    "\nBWA RPGM-X Sleeker Gauges [Ver. " + Req.to_s + " or higher.]\n" +
    "This script will not be activated."
  msgbox(sprintf(title+"\n"+error))
  active = false
end

if active
#if (!$Global_Enable.nil? && active)
  ($imported||={})["RPGM-X_Sleek_ATB"]=[true,1.0]
  # ^ Signifies that the script is installed to other scripts.

module Vocab
  def self.ap;          "Active Time";  end   # AT
  def self.ap_a;        "AT";           end   # AT (short)
end

#===============================================================================
# BWX Custom Bar Style
#===============================================================================
module BWX
  module Vars
    ATBTSTYLE = "||"
    REALTIMEFLAGS += ["atb","datb"]
  end
end

#===============================================================================
# BWX Custom Bar Definition
#===============================================================================
module BWX_CustomBarDefinition
  #=============================================================================
  # ATB Colors
  #=============================================================================
  def ATB_Colors(mode,position, rate)
    case mode
      when 1
        case position
          when 1; Auto_Color(text_color(YSA::CATB::CHARGE_COLOR1),
                             text_color(YSA::CATB::GAUGE_COLOR1),rate)
          when 2; Auto_Color(text_color(YSA::CATB::CHARGE_COLOR2),
                             text_color(YSA::CATB::GAUGE_COLOR2),rate)
        end
      when 0
        case position
          when 1; Auto_Color(text_color(YSA::CATB::GAUGE_COLOR1),
                             text_color(YSA::CATB::CHARGE_COLOR1),rate)
          when 2; Auto_Color(text_color(YSA::CATB::GAUGE_COLOR2),
                             text_color(YSA::CATB::CHARGE_COLOR2),rate)
        end
    end
  end
end
include BWX_CustomBarDefinition

#===============================================================================
# Sleek Gauge Hook
#===============================================================================
class Sleek_Gauge
  #=============================================================================
  # Alias: Refresh
  #=============================================================================
  alias atb_refresh refresh
  def refresh
    case @type
    when "atb"
      @color1 = ATB_Colors(0,1,@cur_rate)
      @color2 = ATB_Colors(0,2,@cur_rate)
    when "datb"
      @color1 = ATB_Colors(1,1,@cur_rate)
      @color2 = ATB_Colors(1,2,@cur_rate)
    end
    atb_refresh
  end
end

#===============================================================================
#   ►►► WARNING: YOU PROBABLY SHOULDN'T EDIT ANYTHING BELOW THIS POINT ◄◄◄
#   ►►►  CUZ YEAH, THERE'S NOTHING REALLY CONFIGURABLE, AND IT DOESN'T ◄◄◄
#   ►►►              LIKE IT WHEN YOU TOUCH IT THAT WAY.               ◄◄◄
#===============================================================================

#===============================================================================
# Window Base
#===============================================================================
class Window_Base < Window
  #=============================================================================
  # Alias: Sleeker Gauge Style
  #=============================================================================
  alias atb_gss gauge_style
  def gauge_style(type)
    return BWX::Vars::DEFSTYLE if !BWX::Vars::MULTIPLESTYLE
    case type
      when "atb";  return BWX::Vars::ATBSTYLE
    end
    atb_gss(type)
  end

  #=============================================================================
  # Draw Actor ATB
  #=============================================================================
  def draw_actor_atb(a,x,y,w=124,p=:def,m=:dyn,h=BWX::Vars::BARHEIGHT,s="",
        nt=false,hdn=false,notag=false)

    t = "atb"; s = gauge_style(t) if s.empty?; r = ap_rate(a)
    if BWX::Vars::REALTIMEFLAGS.include?(t)
      @realtime+=[[x,y,a]] unless @realtime.include?([x,y,a]); end
    draw_gauge(x,y,w,r,ATB_Colors(0,1,r),ATB_Colors(0,2,r),p,h,s,hdn)
    @gauges[[x,y]].extras(Vocab::ap_a,ap_rate(a),1,t,m,true,true)
  end
  
  #=============================================================================
  # Draw Actor Casting ATB
  #=============================================================================
  def draw_actor_catb(a,x,y,w=124,p=:def,m=:dyn,h=BWX::Vars::BARHEIGHT,s="",
        nt=false,hdn=false,notag=false)

    t = "datb"; s = gauge_style(t) if s.empty?; r = dap_rate(a)
    if BWX::Vars::REALTIMEFLAGS.include?(t)
      @realtime+=[[x,y,a]] unless @realtime.include?([x,y,a]); end
    draw_gauge(x,y,w,r,ATB_Colors(1,1,r),ATB_Colors(1,2,r),p,h,s,hdn)
    @gauges[[x,y]].extras(Vocab::ap_a,dap_rate(a),1,t,m,true,true)
  end
end

#===============================================================================
# Modules Graveyard - Where good gauges go to die.
#===============================================================================
class Window_BattleStatus < Window_Selectable
  alias satb_wbs_init initialize
  def initialize(*args)
    if $imported["YSA-CATB"]
      def draw_actor_catb(*args); end; end
    if $imported[:ve_active_time_battle]
      def update_atb; end
      def update_atb_bars; end
      def draw_actor_atb(*args); end
    end
    satb_wbs_init(*args)
  end
end

if $imported[:mog_atb_system]
  class ATB_Meter
    def initialize(*args); end
  end
end
#===============================================================================
# End 2Spoopy4Me Skeltons
#===============================================================================

#===============================================================================
# Game Actor Compatibility Code
#===============================================================================
class Game_Actor < Game_Battler
  if $imported["YSA-CATB"]
    attr_accessor :max_atb
    attr_accessor :atb_charge
    attr_accessor :atb_cast
  #=============================================================================
  # Reinitialize
  #=============================================================================
    alias satb_ga_init initialize
    def initialize(actor)
      @max_atb = 100000
      @atb_charge = 0
      @atb_cast = 0
      satb_ga_init(actor)
    end
    
  #=============================================================================
  # ATB Charge Rate
  #=============================================================================
    def atb_chargerate
      value = @catb_value / MAX_CATB_VALUE
      return @atb_charge = value
    end
    
  #=============================================================================
  # ATB Casting Rate
  #=============================================================================
    def atb_castrate
      value = @catb_value < MAX_CATB_VALUE ? 0 : @ct_catb_value / MAX_CATB_VALUE
      return @atb_cast = value
    end
  end
end

#===============================================================================
# Window BattleStatus
#===============================================================================
class Window_GaugePane < Window_Selectable
  #=============================================================================
  # Draw Misc Gauges
  #=============================================================================
  def draw_misc_gauges(actor,index,sx,rw)
    ry = line_height*3-6
    ry -= BWX::Vars::BARHEIGHT+1 if fetch_atb_system(actor,sx,ry,rw)
    draw_actor_hp(actor,sx,ry,rw,:up)
  end
  
  #=============================================================================
  # Fetch ATB System
  #=============================================================================
  def fetch_atb_system(a,x,y,w,*args)
    found_atb_system = false
    if $imported["YSA-CATB"] || $imported[:mog_atb_system] ||
       $imported[:ve_active_time_battle] || @ccwinter_atb
        found_atb_system = true
        draw_actor_atb(a,x,y,w,*args) unless casting?(a)
        draw_actor_catb(a,x,y,w,*args) if casting?(a)
    end
    return found_atb_system
  end

  #=============================================================================
  # Actor Casting?
  #=============================================================================           
  def casting?(a)
    if $imported["YSA-CATB"]
      return true if a.atb_castrate > 0; end
    if $imported[:mog_atb_system]
      return true if !a.atb_cast.empty?; end
    if $imported[:ve_active_time_battle]
      return true if a.cast_action?; end
    if @ccwinter_atb 
      return true if a.chanting?; end
    return false
  end

  #=============================================================================
  # AP/ATB Rate
  #=============================================================================
  def ap_rate(a)
    value = 0
    value = (a.atb_chargerate) if $imported["YSA-CATB"]
    value = (a.atb / a.atp_max.to_f) if $imported[:mog_atb_system]
    value = (a.atb / a.max_atp.to_f) if $imported[:ve_active_time_battle]
    value = (a.ap / ATB::MAX_AP.to_f) unless @ccwinter_atb.nil?
    value = stamina_rate if defined?(CBS::MAX_STAMINA)
    return value
  end

  #=============================================================================
  # Casting Rate
  #=============================================================================
  def dap_rate(a)
    value = 0
    value = a.atb_castrate if $imported["YSA-CATB"]
    if $imported[:mog_atb_system]
      current = a.atb_cast[1]
      maximum = a.atb_cast[2] if @battler.atb_cast[2] != 0
      maximum = a.atb_cast[0].speed.abs if @battler.atb_cast[2] == 0
      value = current/maximum.to_f
    end   
    value = (-a.atb / a.max_atb.to_f) if $imported[:ve_active_time_battle]
    value = (a.chant_count / a.max_chant_count.to_f) unless @ccwinter_atb.nil?
    return value
  end  
end
#===============================================================================
# EOF
#===============================================================================
end # End Activation Handler
