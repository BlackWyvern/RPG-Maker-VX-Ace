=begin ═════════════════════════════════════════════════════════════════════════
│ ► CODE HEADER ◄
│ Name:           RPGM-X Chrono Movement
│ Author:         Black Wyvern
│ Forum:          RPGMC /topic/37752-chrono-movement/
│
│ Created:        09/14/13
│ Updated:        11/21/16
│ Version:        1.2
│ License:        http://creativecommons.org/licenses/by-sa/3.0/
=end #══════════════════════════════════════════════════════════════════════════

# ► CODE ACTIVATION ◄ ══════════════════════════════════════════════════════════
                    active = true # Turns this script on/off
#═══════════════════════════════════════════════════════════════════════════════

=begin ═════════════════════════════════════════════════════════════════════════
│ ► CODE DOCUMENTATION ◄
│
│ Dependencies:   None
│
│ Description:    Builds an array of possible moves around the character, then
│                 determines if character should move diagonally when walking 
│                 against a diagonal surface.
│
│                 This function is meant to reproduce that from games like
│                 Chrono Trigger.
│
│                 Allows diagonal movement in all other cases.
│
│                 Supports 8-Directional Spritesheets. (Optionally of course.)
│                 Basically, what needs be done is instead of having 8
│                 characters in a file, you will need 4 characters with their
│                 diagonal facings next to the traditional animations.
│                 6x4 instead of the 3x4 default sheet.
│
│                 Visit Hime's link for information on how to set those up.
│                 It's down in the credits. She does a much better job
│                 explaining it than I.
│
│ Configuration:  Enable/Disable extended sprite sheets.
│
│ Instructions:   Plug 'n' Play
│
│ Optional:       None
│
│ Compatability:  Base
│                 Incompatible with pixel movement systems at current.
│
│ Position:       ▼ Materials
│                 
│                 (Somewhere in here.)
│
│                 ▼ Main Process
│
│ Credits:        Hime :: For her awesome 8-directional movement tutorial.
│                 http://himeworks.com/2014/11/eight-directional-movement/
=end #══════════════════════════════════════════════════════════════════════════

#     ╔════════════════════════╗
# ════╝ ► ACTIVATION HANDLER ◄ ╚════════════════════════════════════════════════
# ■ ◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤  DO NOT EDIT  ◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤ ■
if ($Global_Enable.nil? && active) || ($Global_Enable && active)
  ($imported||={})["RPGM-X-Chrono_Menu"]=[1.3,true]
# ■ ◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤  DO NOT EDIT  ◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤ ■
#═══════════════════════════════════════════════════════════════════════════════

#═══════════════════════════════════════════════════════════════════════════════
#                ► START OF SAFE CODE CONFIGURATION OPTIONS ◄
#═══════════════════════════════════════════════════════════════════════════════

# Module: RPGMX ════════════════════════════════════════════════════════════════
module RPGMX
  module MOVEMENT
    EXTENDED_SPRITES = false    # Enables/Disables non-orthogonal spritesheets.
  end
end

#═══════════════════════════════════════════════════════════════════════════════
#                ► END OF SAFE CODE CONFIGURATION OPTIONS ◄
#═══════════════════════════════════════════════════════════════════════════════

#═══════════════════════════════════════════════════════════════════════════════
# ☄☢☣      EXPLOSIVE, RADIOACTIVE, CLASS-4 BIOHAZARD CODE WARNING      ☣☢☄
# ■ ◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤ DO NOT CROSS ◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤ ■
#═══════════════════════════════════════════════════════════════════════════════

unless $EclipseEngine
  # Class: Numeric ═════════════════════════════════════════════════════════════
  class Numeric
    def to_tri(value=0)
      self <=> value
    end
  end
end

# Class: Game_Player ═══════════════════════════════════════════════════════════
class Game_Player < Game_Character
  def move_by_input
    return if !movable? || $game_map.interpreter.running?
    return if Input.dir8 == 0

    movearray = []
    movearray[7] = diagonal_passable?(x, y, 4, 8)
    movearray[8] = passable?(x, y, 8)
    movearray[9] = diagonal_passable?(x, y, 6, 8)

    movearray[4] = passable?(x, y, 4)
    movearray[5] = nil #Character Position
    movearray[6] = passable?(x, y, 6)

    movearray[1] = diagonal_passable?(x, y, 4, 2)
    movearray[2] = passable?(x, y, 2)
    movearray[3] = diagonal_passable?(x, y, 6, 2)

    case Input.dir8
    #Linear
    when 2
      if movearray[2]; move_straight(2)
      else
        if     movearray[1] &&  movearray[3]; move_straight(2)
        elsif  movearray[1] && !movearray[3]; move_diagonal(4,2)
        elsif !movearray[1] &&  movearray[3]; move_diagonal(6,2)
        end
      end
    when 4
      if movearray[4]; move_straight(4)
      else
        if     movearray[1] &&  movearray[7]; move_straight(4)
        elsif  movearray[1] && !movearray[7]; move_diagonal(4,2)
        elsif !movearray[1] &&  movearray[7]; move_diagonal(4,8)
        end
      end
    when 6
      if movearray[6]; move_straight(6)
      else
        if     movearray[3] &&  movearray[9]; move_straight(6)
        elsif  movearray[3] && !movearray[9]; move_diagonal(6,2)
        elsif !movearray[3] &&  movearray[9]; move_diagonal(6,8)
        end
      end
    when 8
      if movearray[8]; move_straight(8)
      else
        if     movearray[7] &&  movearray[9]; move_straight(8)
        elsif  movearray[7] && !movearray[9]; move_diagonal(4,8)
        elsif !movearray[7] &&  movearray[9]; move_diagonal(6,8)
        end
      end
    #Diags
    when 1; move_diagonal(4, 2)
    when 3; move_diagonal(6, 2)
    when 7; move_diagonal(4, 8)
    when 9; move_diagonal(6, 8)
    end
  end
end

# Class: Game_CharacterBase ════════════════════════════════════════════════════
class Game_CharacterBase
  def distance_per_frame
    s = (2**real_move_speed/256.0)
    return @direction % 2 == 0 ? s : s / 1.41421356237
  end
end

if RPGMX::MOVEMENT::EXTENDED_SPRITES
  # Class: Game_CharacterBase ══════════════════════════════════════════════════
  class Game_CharacterBase
    def move_diagonal(cx, cy)
      @move_succeed = diagonal_passable?(x, y, cx, cy)
      if @move_succeed
        @x = $game_map.round_x_with_direction(@x, cx)
        @y = $game_map.round_y_with_direction(@y, cy)
        @real_x = $game_map.x_with_direction(@x, reverse_dir(cx))
        @real_y = $game_map.y_with_direction(@y, reverse_dir(cy))
        increase_steps

        case cx
          when 4; cy == 2 ? set_direction(1) : set_direction(7)
          when 6; cy == 2 ? set_direction(3) : set_direction(9)
        end
      end
    end
  end

  # Class: Sprite_Character ════════════════════════════════════════════════════
  class Sprite_Character < Sprite_Base
    def update_src_rect
      if @tile_id == 0      
        if @character.direction % 2 == 0
          index = @character.character_index
          pattern = @character.pattern < 3 ? @character.pattern : 1
          sx = (index%4*3+pattern)*@cw
          sy = (index/4*4+(@character.direction-2)/2)*@ch
          self.src_rect.set(sx,sy,@cw,@ch)
        else
          index = @character.character_index + 1
          pattern = @character.pattern < 3 ? @character.pattern : 1
          sx = (index%4*3+pattern)*@cw
          sy = (index/4*4+(((@character.direction*2)%10)-2)/2)*@ch
          self.src_rect.set(sx,sy,@cw,@ch)
        end
      end
    end
  end

  class Game_Map
    def x_with_direction(x,d); x+(d%3==0?1:(d+2)%3==0?-1: 0); end
    def y_with_direction(y,d); y+(d<4?1: d>6?-1: 0);end
    def round_x_with_direction(x,d); round_x(x+(d%3==0?1:(d+2)%3==0?-1: 0)); end
    def round_y_with_direction(y,d); round_y(y+(d<4?1: d>6?-1: 0)); end
  end

  # Class: Game_Character ══════════════════════════════════════════════════════
  class Game_Character < Game_CharacterBase
    def face_direction(x,y,m)
      case [x,y]
        when [-1,-1]; m ? set_direction(3) : set_direction(7)
        when [-1,0];  m ? set_direction(6) : set_direction(4)
        when [-1,1];  m ? set_direction(9) : set_direction(1)
        when [0,-1];  m ? set_direction(2) : set_direction(8)
        when [0,1];   m ? set_direction(8) : set_direction(2)
        when [1,-1];  m ? set_direction(1) : set_direction(9)
        when [1,0];   m ? set_direction(4) : set_direction(6)
        when [1,1];   m ? set_direction(7) : set_direction(3)
      end
    end

    def turn_toward_character(character)
      sx = distance_x_from(character.x).to_tri
      sy = distance_y_from(character.y).to_tri
      face_direction(sx,sy,true)
    end

    def turn_away_from_character(character)
      sx = distance_x_from(character.x).to_tri
      sy = distance_y_from(character.y).to_tri
      face_direction(sx,sy,false)
    end
  end
end

# ══════════════════════════════════════════════════════════════════════════════
# ════╗ End Activation Handler ╔════════════════════════════════════════════════
end # ╚════════════════════════╝ End of File - Srsly, there's nothing more here!
