=begin
#===============================================================================
  Black Wyvern Arts - RPGMaker-X Chrono Menu
  Author: Black Wyvern
  Created: 03/02/16
  Updated: 03/09/16
  Version: 1.1
#===============================================================================
  *** Only for RPG Maker VX Ace. ***
  ------------------------------------------------------------------------------
  To install this script, open up your script editor and copy/paste this script
  to an open slot below ▼ Materials but above ▼ Main. Remember to save.
  
  Terms of use:
    1. Give credit where credit is due.
    2. You may use my code in anything you like. Commercial, non-commercial.
    3. If you edit my code in any way, please link back to the original source.
    4. Support is always appreciated in form of gold, sacrificial virgins,
        large quantaties of bacon (or other cooked meats), or free games.
          I can be contacted at LuneTheWyvern@Gmail.com

  Description:
    - Reproduces, in part, the menu system from Chrono Trigger
  
  Configuration:
    - Options below allow for customization. (They're fairly self-explanitory)
  
  Instructions: Plug 'n' Play
    - If you are finding an issue with background scene rendering, you may need
      to fiddle with the z axis of the items on that scene. This /should/ in
      theory be compatable with any given scene.. But we all know how code is.
    - If CUSTOM_ENTRIES is true you will have to add the commands yourself
      via Call Script in Events. You can use this for certain quest related
      stuff or if you want to disable commands temporarly.
      
      To add/delete a command ingame follow these instructions:

      menu_scene(2,:add) # To add id 2 to menu list.
      menu_scene(3,:del) # To remove id 3 from menu list.

      In a conditional branch do like this to check if a id is active:
      menu_active?(5) # Returns true if id 5 is enabled.

      To set a id to be enabled do like this:
      menu_active(1, true) # Set id 1 to be enabled.

      To add/delete every menu item to the list use this method:
      menu_scene_all(type = :add/:del)
    
      ►►► BIG NOTICE YOU SHOULD PROBABLY READ ◄◄◄
      Due to the nature of this script, you need a custom Formation Scene to add
      to this menu. It does not support such vanilla. Sorry. :S I might work on
      that if I get asked to enough.
  
  Optional:
    - None
  
  Dependencies:
    - None
  
  Compatability:
    - None

  Credits:
    - Nicke :: XS Icon Menu
      http://www.rpgmakervxace.net/topic/2535-xs-icon-menu/
#===============================================================================
=end

active = true # Turns the script on or off.
if ($Global_Enable.nil? && active) || ($Global_Enable && active)
  ($imported||={})["RPGM-X_Chrono"]=[true,1.1]
  # ^ Signifies that the script is installed to other scripts.

module BWX
#===============================================================================
# Chrono Menu Settings
# -- These variables change how the menu functions.
#===============================================================================
  module CHRONO_MENU
    
    # If you set CUSTOM_ENTRIES to true, you will have to add menu items to it
    # via script calls. See the above for details.
    CUSTOM_ENTRIES = false
    
    # Text to display if the menu is currently disabled or unpopulated.
    MENU_EMPTY = "There are no menu options available at this time."
    
    # Transition, the effect between scenes. nil to use default.
    # TRANSITION = [Speed, Transition, Opacity]
    # TRANSITION = [40, "Graphics/Transitions/4", 50]
    TRANSITION = nil
    
    # MENU_ITEM[x] = [
    # "Title", "Description",
    # :symbol, :command, Icon, Useable?, Custom_Screne (optional)]
    MENU_ITEM = []
    MENU_ITEM[0] = [
      "Journal", "Read your personal journal.",
      :journal,     :command_custom,    2109, true, Scene_Journal]
    MENU_ITEM[2] = [
      "Status", "See the current status of the hero.",
      :status,      :command_status,    1286, true]
    MENU_ITEM[3] = [
      "Item", "Browse through your acquired items.",
      :item,        :command_item,       773, true]
    MENU_ITEM[4] = [
      "Equip", "Change your equipment.",
      :equip,       :command_equip,      854, true]
    MENU_ITEM[5] = [
      "Skills", "Manage your available skills.",
      :skill,       :command_skill,      276, true]
    MENU_ITEM[6] = [
      "Save", "Record your progress.",
      :save,        :command_save,      1053, true]
    MENU_ITEM[7] = [
      "Load", "Load your saved progress.",
      :load,        :command_custom,    1039, true, Scene_Load]
  end
end

#===============================================================================
# Game_System
#===============================================================================
class Game_System
  attr_accessor :menu_list
  #=============================================================================
  # Reinitialize
  #=============================================================================
  alias menu_gs_init initialize
  def initialize
    menu_gs_init
    @menu_list = []
  end
end

#===============================================================================
# Game_Interpreter
#===============================================================================
class Game_Interpreter
  #=============================================================================
  # Menu Scene (Add/Remove Entries)
  #=============================================================================
  def menu_scene(id, type)  
    case type
      when :add
      unless $game_system.menu_list.include?(BWA::CHRONO_MENU::MENU_ITEM[id])
        $game_system.menu_list.push(BWA::CHRONO_MENU::MENU_ITEM[id])
      end unless BWA::CHRONO_MENU::MENU_ITEM[id].nil?
      when :del
      unless BWA::CHRONO_MENU::MENU_ITEM[id].nil?
        $game_system.menu_list.delete(BWA::CHRONO_MENU::MENU_ITEM[id])
      end 
    end
  end
  
  #=============================================================================
  # Menu Active? (Can Use Entry)
  #=============================================================================
  def menu_active?(id)
    return if $game_system.menu_list[id].nil?
    return $game_system.menu_list[id][5]
  end
  
  #=============================================================================
  # Menu Active (Enable/Disable Entry)
  #=============================================================================
  def menu_active(id, enabled)
    $game_system.menu_list[id][5] = enabled
  end
  
  #=============================================================================
  # Menu Scene All (Add/Remove All Entries)
  #=============================================================================
  def menu_scene_all(type = :add)
    BWA::CHRONO_MENU::MENU_ITEM.each_index do |i|
      case type
        when :add; menu_scene(id, :add)
        when :del; menu_scene(id, :del)
      end
    end
  end
end

#===============================================================================
# Window Menu Command
#===============================================================================
class Window_MenuCommand < Window_Command
  #=============================================================================
  # Window Initialization
  #=============================================================================
  def window_width
    (24 * @menu_items.size) +
    (standard_padding * 2) +
    (spacing * @menu_items.size - 1)
  end
  def window_height; fitting_height(1); end
  def col_max; @menu_items.size; end
  def item_width; 24; end
  def item_height; 24; end
  def item_max; @menu_items.size; end
  def spacing; return 4; end
  def contents_height; item_height; end
  def contents_width
    (item_width * item_max) + (spacing * item_max - 1)
  end

  #=============================================================================
  # Fetch Menu Items
  #=============================================================================
  def fetch_menu_items
    BWX::CHRONO_MENU::MENU_ITEM.compact!
    if BWX::CHRONO_MENU::CUSTOM_ENTRIES
      return @menu_items = $game_system.menu_list
    else
      return @menu_items = BWX::CHRONO_MENU::MENU_ITEM
    end
  end

  #=============================================================================
  # Draw item
  #=============================================================================
  def draw_item(index)
    x = 0
    for item in @menu_items
      next if item[4].nil?
      draw_icon(item[4], x, 0, item[5])
      x += item_width + spacing
    end
  end
  
  #=============================================================================
  # Make Command List
  #=============================================================================
  def make_command_list
    fetch_menu_items
    for item in @menu_items
      add_command(item[0], item[2], save_enabled, item[6]) if item[2] == :save
      add_command(item[0], item[2], item[5], item[6]) unless item[2] == :save
    end
  end
end

#===============================================================================
# Window Menu Help
#===============================================================================
class Window_Menu_Help < Window_Help
  attr_accessor :index
  #=============================================================================
  # Reinitialize
  #=============================================================================
  alias menu_wh_init initialize
  def initialize
    super
    @index = nil
  end

  #=============================================================================
  # Set Text
  #=============================================================================
  def set_text(text, enabled=true)
    if text != @text
      menu_color(Color.new(255,255,255), enabled)
      @text = text
      refresh
    end
  end

  #=============================================================================
  # Menu Color
  #=============================================================================
  def menu_color(color, enabled = true)
    contents.font.color.set(color)
    contents.font.color.alpha = 150 unless enabled
  end
end

#==============================================================================
# Scene Menu Base
#==============================================================================
class Scene_MenuBase < Scene_Base
  #=============================================================================
  # Start
  #=============================================================================
  alias menu_smb_start start
  def start
    fetch_menu_items
    menu_smb_start
  end
  
  #=============================================================================
  # Fetch Menu Items
  #=============================================================================
  def fetch_menu_items
    if BWX::CHRONO_MENU::CUSTOM_ENTRIES
      return @menu_items = $game_system.menu_list
    else
      return @menu_items = BWX::CHRONO_MENU::MENU_ITEM
    end
  end

  #=============================================================================
  # Perform Transition
  #=============================================================================
  def perform_transition
    return if @menu_items.empty?
    BWX::CHRONO_MENU::TRANSITION.nil? ? Graphics.transition(15) :
      Graphics.transition(
        BWX::CHRONO_MENU::TRANSITION[0],
        BWX::CHRONO_MENU::TRANSITION[1],
        BWX::CHRONO_MENU::TRANSITION[2])
  end
end

#==============================================================================
# Scene_Menu
#==============================================================================
class Scene_Menu < Scene_MenuBase
  #=============================================================================
  # Start
  #=============================================================================
  def start
    super
    @menu_items = fetch_menu_items
    return command_empty if @menu_items.empty?
    SceneManager.bg_scene.viewport.visible = true if !SceneManager.bg_scene.nil?
    create_help_window
    create_command_window
    @help_window.index = @command_window.index
    help_update(@command_window.index)
    @initial = true
  end
  
  #=============================================================================
  # Create Command Window
  #=============================================================================
  def create_command_window
    @command_window = Window_MenuCommand.new
    @command_window.x = (Graphics.width - @command_window.width) / 2
    @command_window.y = (Graphics.height - @command_window.height) / 2
    @command_window.z = 200
    @command_window.opacity = 255
    for item in @menu_items
      @command_window.set_handler(item[2], method(item[3]))
    end
    @command_window.set_handler(:cancel, method(:return_scene))

    @Occlude = Window_Base.new(-10,@help_window.height-15,
      Graphics.width+20,Graphics.height)
    @Occlude.opacity = 0
    @Occlude.z = 190
    @Occlude.contents.fill_rect(0,0,Graphics.width,Graphics.height,
      Color.new(25,25,25,128))
  end
  
  #=============================================================================
  # Create Help Window
  #=============================================================================
  def create_help_window
    @help_window = Window_Menu_Help.new
    @help_window.viewport = @viewport
    @help_window.z = 200
    @help_window.viewport.z = 200
  end
  
  #=============================================================================
  # Alias: Update
  #=============================================================================
  alias menu_sc_update update
  def update
    menu_sc_update
    old_index = @help_window.index
    if old_index != @command_window.index
      help_update(@command_window.index)
      stack_scene(@command_window.index)
    end
    stack_scene(@command_window.index) if @initial
    @initial = false if @initial
  end
  
  #=============================================================================
  # Help Update
  #=============================================================================
  def help_update(index)
    icon = @menu_items[index][4]
    title = '\i[' + icon.to_s + ']' + " " + @menu_items[index][0]
    desc = '\c[0]' + @menu_items[index][1]
    text = "#{title}\n#{desc}"
    enabled = @menu_items[index][5]
    @help_window.index = index
    @help_window.set_text(text, enabled)
  end
  
  #=============================================================================
  # Stack Scene
  #=============================================================================
  def stack_scene(index)
    command = BWX::CHRONO_MENU::MENU_ITEM[index][3]
    SceneManager.unstack
    case command
      when :command_status
        SceneManager.stack(Scene_Status)
      when :command_item
        SceneManager.stack(Scene_Item)
      when :command_equip
        SceneManager.stack(Scene_Equip)
      when :command_skill
        SceneManager.stack(Scene_Skill)
      when :command_save
        SceneManager.stack(Scene_Save)
      when :command_game_end
        SceneManager.stack(Scene_End)
      when :command_custom
        sceneaccess = BWX::CHRONO_MENU::MENU_ITEM[index][6]
        SceneManager.stack(sceneaccess)
    end
  end
  
  #=============================================================================
  # Call Scenes via Command
  #=============================================================================
  def command_status; SceneManager.call(Scene_Status); end
  def command_skill; SceneManager.call(Scene_Skill); end
  def command_equip; SceneManager.call(Scene_Equip); end
  def command_custom; SceneManager.call(@command_window.current_ext); end
  def command_empty
    @message_window = Window_Message.new
    $game_message.texts << BWX::CHRONO_MENU::MENU_EMPTY
    SceneManager.unstack
    SceneManager.call(Scene_Map)
  end
end

#==============================================================================
# Scene Manager
#==============================================================================
module SceneManager
  @bg_scene = nil
  #=============================================================================
  # Get Current Background Scene
  #=============================================================================
  def self.bg_scene
    @bg_scene
  end
  
  #=============================================================================
  # Compare Current Background Scene
  #=============================================================================
  def self.bg_scene_is?(scene_class)
    @bg_scene.instance_of?(scene_class)
  end
    
  #=============================================================================
  # Stack
  #=============================================================================
  def self.stack(scene_class)
    @bg_scene = scene_class.new
    @bg_scene.main
  end
  
  #=============================================================================
  # Unstack
  #=============================================================================
  def self.unstack
    $BGStore = @bg_scene
    @bg_scene.dispose_all_windows unless $BGStore.nil?
    @bg_scene.dispose_main_viewport unless $BGStore.nil?
    $BGStore.dispose_all_windows unless $BGStore.nil?
    $BGStore.dispose_main_viewport unless $BGStore.nil?
    $BGStore = nil
    @bg_scene = nil
  end
end

#==============================================================================
# Scene Base
#==============================================================================
class Scene_Base
  attr_accessor :viewport

  #=============================================================================
  # Create Main Viewport
  #=============================================================================
  def create_main_viewport
    @location = where_am_i?
    @viewport = Viewport.new
    SceneManager.unstack if self.class != Scene_Menu &&
      @location && self.class != SceneManager.bg_scene.class
  end
  
  #=============================================================================
  # Where Am I?
  #=============================================================================
  def where_am_i?
    return true  if self == SceneManager.scene
    return false if self == SceneManager.bg_scene
  end
  
  #=============================================================================
  # Alias: Start
  #=============================================================================
  alias menu_sb_ps post_start
  def post_start
    instance_variables.each do |varname|
      ivar = instance_variable_get(varname)
      if !@location
        ivar.z = 0 if ivar.is_a?(Viewport)
        ivar.visible = false if ivar.is_a?(Window) &&
          !(/(?:help_window|helpwindow)/i.match(varname).to_s.empty?)
      end
      ivar.visible = false if ivar.is_a?(Sprite) &&
        !(/(?:background_sprite)/i.match(varname).to_s.empty?)
    end
    SceneManager.bg_scene.viewport.visible = false if @location &&
        !SceneManager.bg_scene.nil? && self.class != Scene_Menu
    menu_sb_ps
  end
  
  #=============================================================================
  # Terminate
  #=============================================================================
  def terminate
    Graphics.freeze
    if @location
      dispose_all_windows
      dispose_main_viewport
    end
  end
end

#==============================================================================
# Scene File
#==============================================================================
class Scene_File < Scene_MenuBase
  #=============================================================================
  # Create Help Window
  #=============================================================================
  def create_help_window
    @help_window = Window_Help.new(2) if !@help_window
    @help_window.set_text(help_window_text)
  end
  
  #=============================================================================
  # Terminate
  #=============================================================================
  def terminate
    super
  end
end

#==============================================================================
# Window Base
#==============================================================================
class Window_Base < Window
  alias chrono_init initialize
  def initialize(*args)
    chrono_init(*args)
    @location = where_am_i?
  end
  
  #=============================================================================
  # Where Am I?
  #=============================================================================
  def where_am_i?
    caller.each_index do |i|
      info = caller[i].split(":")
      script = $RGSS_SCRIPTS[info[0][1,4].to_i][1]
      name = /(?:scene_)\w+/i.match(script).to_s
      next if name.empty? || name == "Scene_Base"
      return SceneManager.scene_is?(Object.const_get(name))
    end
  end
end

#==============================================================================
# Window Selectable
#==============================================================================
class Window_Selectable < Window_Base
  #=============================================================================
  # Alias: Process Cursor Move
  #=============================================================================
  alias menu_ws_pcm process_cursor_move
  def process_cursor_move
    return unless @location
    menu_ws_pcm
  end
end
#===============================================================================
# EOF
#===============================================================================
end # End Activation Handler
