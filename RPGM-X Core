=begin
#===============================================================================
  Black Wyvern Arts - RPGMaker-X Core
  Author: Black Wyvern
  Created: 09/01/13
  Updated: 03/21/16
  Version: 1.0
#===============================================================================
  *** Only for RPG Maker VX Ace. ***
  ------------------------------------------------------------------------------
  To install this script, open up your script editor and copy/paste this script
  to an open slot below ▼ Materials but above ▼ Main. Remember to save.
  
  Terms of use:
    1. Give credit where credit is due.
    2. You may use my code in anything you like. Commercial, non-commercial.
    3. If you edit my code in any way, please link back to the original source.
    4. Support is always appreciated in form of gold, sacrificial virgins,
        large quantaties of bacon (or other cooked meats), or free games.
          I can be contacted at LuneTheWyvern@Gmail.com

  Description:
    RPGMaker-X Core System (All listed functions are optional)
    - One-variable control to enable/disable all RPGM-X scripts.
    - Custom Vocab module to define text for otherwise unlabled stats
    - Enables screen resizing
      (Past a certain point you need a modded DLL file or "Unlimited Res")
    - Changes/Unifies font settings set by default and Yanfly scripts
    - Comprehensive Numeric/Boolean/Integer Logical operators and conversions
    - Quick access to party size limit
    - Windowskin options
    - Adds definitions for some RPGM-X Scripts
  
  Configuration:
    Options below allow for customization. (They're fairly self-explanitory)
    -- If you are not using a colorspace I developed, it is recommended not to
       use the BWX_COLOR setting, as it would look all sorts of wierd.
  
  Instructions: Plug 'n' Play
    This needs to be located above any other RPGM-X scripts that depend on it.
    If you are using Yanfly Engine, this will need to be placed below it.
    Order:
      Yanfly Scripts
      Core System
      Debugging
      Colorspace
      -Others-
  
  To use the new Numeric and String classes, you will have to suffix variables.
  (With exception to !)
  I was trying to figure out how to prefix them, but I don't think I can, lol.
  EX: "heLLo"./     == "HEllO"
  EX: "OMG CAPS"._  == "omg caps"
  EX: "omg caps".^  == "OMG CAPS"
  EX: "hello".~     == uryyb
  EX: !!"true"      == true
  EX: !!"Bacon"     == false

  Optional:
    - None
  
  Dependencies:
    - None
  
  Compatability:
    - None

  Credits:
    - KiloZapit :: Word Wrap
      http://www.rpgmakervxace.net/topic/6964-word-wrapping-message-boxes/
#===============================================================================
=end

if true # Turns the script on or off.
  ($imported||={})["BWA_RPGM-X"]=[true,1.0]
  # ^ Signifies that the script is installed to other scripts.

#===============================================================================
# Variable Module
# -- These variables control many of the default settings of the game itself.
# -- Edit them as needed.
#===============================================================================

$Global_Enable = true     # Master enable switch for RPGM-X scripts.

module BWX
  module Vars
    #===========================================================================
    # Master Control Switches
    #===========================================================================
    MASTER_OVOCAB = true  # Override any existing vocab
    MASTER_RESIZE = true  # Resize the Game Window (May require modified DLL)
                          # You can also use Unlimited Rez with a stipulation.
                          # Unlimited Rez has a Plane Rewrite that is lesser and
                          # conflicts with the rewrite in the Bugfix Suite [Top]
                          # You will need to comment that part out in UR.

    MASTER_OVFONT = true  # Override default Font settings
    MASTER_WINDOW = true  # Override default Window settings
    
    #===========================================================================
    # Default Screen Width/Height
    # - Only in effect if MASTER_RESIZE == true
    #===========================================================================
    DSW_INT   = 1024
    DSH_INT   = 768
    
    #===========================================================================
    # Default Text Settings
    # - Only in effect if MASTER_OVFONT == true
    #===========================================================================
    DFL_ARRAY = [       # Font_List
      "Myriad Pro",
      "Palatino Linotype",
      "Neuton",
      "VL Gothic",
      "Verdana"]
    DFS_INT   = 18      # Font_Size
    DFB_BOOL  = false   # Font_Bold
    DFI_BOOL  = false   # Font_Italic
    DFS_BOOL  = true    # Font_Shadowed
    DFO_BOOL  = true    # Font_Outlined
    UNIFYFNT  = true    # Automatically overrides some YEA font defaults

    # Default Font (Outline) Color
    DFC_COL   = Color.new(255,255,255,255)
    DFOC_COL  = Color.new(000,000,000,192)

    #===========================================================================
    # Default Window Settings
    # -- Only in effect if MASTER_WINDOW == true
    #===========================================================================
    WINDOW_TONE = false           # Use legacy window coloration thing
    MSGWW       = true            # Enable/Disable Word Wrap
    MAX_PARTY   = 2               # Maximum Combat Party Size
    WNDSKN      = "Windowskin"    # Window Skin Name (Blank if default)
    IS_COLS     = 3               # Number of colums to display in item/skill
                                  # windows. Default is 2. May want to put it
                                  # there if you aren't upscaling your rez

    # Generate font settings array (You shouldn't need to poke at this.)
    BWX_FONT  = [
      DFL_ARRAY,  DFS_INT,  DFC_COL,  DFB_BOOL,
      DFI_BOOL,   DFS_BOOL, DFO_BOOL, DFOC_COL]
  end
end

#===============================================================================
# Vocab Module
# -- Just defines the display name, and shorthand for various variables.
# -- You can change these to whatever you want.
#===============================================================================
if BWX::Vars::MASTER_OVOCAB
  module Vocab
    def self.xp;    "Expertise";  end   # XP
    def self.xp_a;  "Ex";         end   # XP (short)

    def self.xparam(id)
      case id
      when 0 ; "Accuracy Bonus"
      when 1 ; "Evasion Chance"
      when 2 ; "Critical Chance"
      when 3 ; "Critical Evasion"
      when 4 ; "Magic Evasion"
      when 5 ; "Magic Reflection"
      when 6 ; "Counter Attack"
      when 7 ; hp_a + " Regen / Turn"
      when 8 ; mp_a + " Regen / Turn"
      when 9 ; tp_a + " Regen / Turn"
      end
    end
    
    def self.sparam(id)
      case id
      when 0 ; "Threat Modifier"
      when 1 ; "Guard Power"
      when 2 ; "Healing Power"
      when 3 ; "Consumable Power"
      when 4 ; "Magic Fatigue"
      when 5 ; tp_a + " Restore Power"
      when 6 ; "Phys Damage Rate"
      when 7 ; "Mag Damage Rate"
      when 8 ; "Terrain Damage Rate"
      when 9 ; "Expertise Boost"
      end
    end
  end
end

#===============================================================================
#   ►►► WARNING: YOU PROBABLY SHOULDN'T EDIT ANYTHING BELOW THIS POINT ◄◄◄
#   ►►►  CUZ YEAH, THERE'S NOTHING REALLY CONFIGURABLE, AND IT DOESN'T ◄◄◄
#   ►►►              LIKE IT WHEN YOU TOUCH IT THAT WAY.               ◄◄◄
#===============================================================================

#===============================================================================
# Master Screen Resizing (Only if enabled, and using a Plane Rewrite)
#===============================================================================
if BWX::Vars::MASTER_RESIZE &&
  (!defined?(RGSS3Plane).nil? || $imported["BWA_BugFixesTop"])
  Graphics.resize_screen(BWX::Vars::DSW_INT,BWX::Vars::DSH_INT)
  $ScreenRez = Rect.new(0, 0, Graphics.width, Graphics.height)
end

#===============================================================================
# Font Definitions
#===============================================================================
if BWX::Vars::MASTER_OVFONT
  Font.default_name       = BWX::Vars::BWX_FONT[0]
  Font.default_size       = BWX::Vars::BWX_FONT[1]
  Font.default_color      = BWX::Vars::BWX_FONT[2]
  Font.default_bold       = BWX::Vars::BWX_FONT[3]
  Font.default_italic     = BWX::Vars::BWX_FONT[4]
  Font.default_shadow     = BWX::Vars::BWX_FONT[5]
  Font.default_outline    = BWX::Vars::BWX_FONT[6]
  Font.default_out_color  = BWX::Vars::BWX_FONT[7]
end

#===============================================================================
# Override Definitions
# -- Nuke ALL the settings! \o,
#===============================================================================
if BWX::Vars::UNIFYFNT
  if defined?(YEA); module YEA
    if defined?(CORE); module CORE
      FONT_NAME           = BWX::Vars::BWX_FONT[0]
      FONT_SIZE           = BWX::Vars::BWX_FONT[1]
      FONT_COLOUR         = BWX::Vars::BWX_FONT[2]
      FONT_BOLD           = BWX::Vars::BWX_FONT[3]
      FONT_ITALIC         = BWX::Vars::BWX_FONT[4]
      FONT_SHADOW         = BWX::Vars::BWX_FONT[5]
      FONT_OUTLINE        = BWX::Vars::BWX_FONT[6]
      FONT_OUTLINE_COLOUR = BWX::Vars::BWX_FONT[7]
    end; end

    if defined?(BATTLE); module BATTLE
      DEFAULT                     = BWX::Vars::BWX_FONT[0]
      BATTLESTATUS_NAME_FONT_SIZE = BWX::Vars::BWX_FONT[1]
      BATTLESTATUS_TEXT_FONT_SIZE = BWX::Vars::BWX_FONT[1]
    end; end
    
    if defined?(ELEMENT_POPUPS); module ELEMENT_POPUPS
      DEFAULT = BWX::Vars::BWX_FONT[0]
    end; end
  end; end
end

#===============================================================================
# Numeric/Boolean/String Modules
# -- Digit Grouping
# -- Clamp value (Min/Max values)
# -- Rounding, with significant figures
# -- Sign logic
# -- (Un)Percent
# -- Numeric->    Boolean
# -- Numeric->    !Boolean
# -- Numeric->    Trinary Bool
# -- Boolean->    Integer
# -- String->     Boolean
# -- String->     !Boolean
# -- String->     Uppercase
# -- String->     Lowercase
# -- String->     Swapcase
# -- String->     Perform Jumble
#===============================================================================
class Numeric
  def group
    return self.to_s
    self.to_s.gsub(/(\d)(?=\d{3}(?:\.|$))(\d{3}\.)?/,'$1,$2')
  end

  def clamp min, max
    self < min ? min : (self > max ? max : self)
  end

  def round_to(places)
    power = 10.0**places
    (self * power).round / power
  end

  def negative?; self < 0; end
  def positive?; self > 0; end
  def percent; (self * 100).round; end
  def unpercent; self.to_f / 100; end
  def to_b; self >= 1; end
  def !; !self.to_b; end

  def to_tri
    return -1 if self < 0
    return 0 if self == 0
    return 1 if self > 0
  end
end

class FalseClass; def to_i; 0; end; end 
class TrueClass; def to_i; 1; end; end 

class String
  def to_b; self.downcase == "true"; end
  def !; !self.to_b; end
  def ^; self.upcase; end
  def _; self.downcase; end
  def /; self.swapcase; end
  def ~; tr 'A-Za-z', 'N-ZA-Mn-za-m'; end
end

#===============================================================================
# Game Party
# -- Maximum Battle Party Members
#===============================================================================
class Game_Party < Game_Unit
  #=============================================================================
  # Max Battle Members
  #=============================================================================
  def max_battle_members
    return BWX::Vars::MAX_PARTY
  end
end

#===============================================================================
# Window Base
# -- Color Definitions
# -- Windowskin Control
# -- KilloZapit's Wordwrap (Refer to #KZ Word Wrap)
#===============================================================================
if BWX::Vars::MASTER_WINDOW
class Window_Base < Window
  #=============================================================================
  # Reinitialize
  #=============================================================================
  alias rpm_initialize initialize
  def initialize(x, y, width, height)
    rpm_initialize(x, y, width, height)
    self.windowskin = Cache.system(BWX::Vars::WNDSKN)
  end
  
  #=============================================================================
  # Alias: Update Tone
  #=============================================================================
  alias rpgmx_wb_ut update_tone
  def update_tone(*args)
    return unless BWX::Vars::WINDOW_TONE
    rpgmx_wb_ut(*args)
  end

  if BWX::Vars::MSGWW
  #=============================================================================
  # Alias: Process Character
  #=============================================================================
  alias_method :process_character_kz_window_base, :process_character
  def process_character(c, text, pos)
    c = ' ' if @convert_newlines && c == "\n"
    if @wordwrap && c =~ /[ \t]/
      c = '' if @collapse_whitespace && @lastc =~ /[\s\n\f]/
      if pos[:x] + get_next_word_size(c, text) > contents.width - @right_margin
        process_new_line(text, pos)
      else
        process_normal_character(c, pos)
      end
      @lastc = c
    else
      @lastc = c
      process_character_kz_window_base(c, text, pos)
    end
  end

  #=============================================================================
  # Alias: Next Word Size
  #=============================================================================
  def get_next_word_size(c, text)
    nextword = text.split(/[\s\n\f]/, 2)[0]
    if nextword
      icons = 0
      if nextword =~ /\e/i
        nextword = nextword.split(/\e[oOcC]+\[\d*\]/).join
        nextword = nextword.split(/\e[\.\|\^<>!]/).join
        nextword = nextword.split(/\e[^iIhH]+/, 2)[0]
        nextword.gsub!(/\e[iIhH]+\[[\d,]*\]/) do
          icons += 1
          ''
        end if nextword
      end
      wordsize=(nextword ? text_size(c + nextword).width : text_size( c ).width)
      wordsize += icons * 24
    else
      wordsize = text_size( c ).width
    end
    return wordsize
  end

  #=============================================================================
  # Alias: Process Escape Character (Word Wrap)
  #=============================================================================
  alias_method :process_escape_character_kz, :process_escape_character
  def process_escape_character(code, text, pos)
    case code.upcase
    when 'WW';  @wordwrap = true
    when 'NW';  @wordwrap = false
    when 'WS';  @convert_newlines = true
    when 'NL';  @convert_newlines = false
    when 'CS';  @collapse_whitespace = true
    when 'PRE'; @collapse_whitespace = false
    when 'BR';  process_new_line(text, pos)
      @lastc = "\n"
    when 'RM';  @right_margin = obtain_escape_param(text)
    else
      process_escape_character_kz(code, text, pos)
    end
    if pos[:x] + get_next_word_size('', text) > contents.width
      process_new_line(text, pos)
    end
  end

  end # Wordwrap Flag
end

#===============================================================================
# Window Skill List
#===============================================================================
class Window_SkillList < Window_Selectable
  #=============================================================================
  # Max Number of Colums
  #=============================================================================
  def col_max
    BWX::Vars::IS_COLS
  end
end

#===============================================================================
# Window Item List
#===============================================================================
class Window_ItemList < Window_Selectable
  #=============================================================================
  # Max Number of Colums
  #=============================================================================
  def col_max
    BWX::Vars::IS_COLS
  end
end

#===============================================================================
# Window Actor Command
# - Sneaky insert that hides Window_ActorCommand commands if they are sealed.
#===============================================================================
class Window_ActorCommand < Window_Command
  def add_skill_commands
    @actor.added_skill_types.sort.each do |stype_id|
      name = $data_system.skill_types[stype_id]
      next if @actor.skill_type_sealed?(stype_id)
      match = false
      for skill in @actor.skills
        next unless skill != nil
        next unless skill.stype_id == stype_id
        match = true
      end
      add_command(name, :skill, true, stype_id) if match
    end
  end
end
end # Window Flag

#===============================================================================
# Game Actor
# -- XP Rate for gauge calculations.
#===============================================================================
class Game_Actor < Game_Battler
  #=============================================================================
  # XP Rate
  #=============================================================================
  def xp_rate
    a = xp_in_level
    b = xp_to_next
    return a / b if b > 0
    return 1 unless b > 0
  end
  
  #=============================================================================
  # XP To Next Level
  #=============================================================================
  def xp_to_next
    return next_level_exp - current_level_exp if level != max_level
    return 0 if level == max_level
  end
  
  #=============================================================================
  # XP Into This Level
  #=============================================================================
  def xp_in_level
    exp - current_level_exp
  end
end
#===============================================================================
# EOF
#===============================================================================
end # End Activation Handler
